service: ${self:custom.serviceName}
frameworkVersion: '3'
configValidationMode: error
deprecationNotificationMode: error

provider:
  name: aws
  runtime: nodejs20.x
  apiGateway:
    apiKeys:
      - ${self:custom.xapiKey.${opt:stage}}
  stage: ${opt:stage,'DESA'}
  region: ${self:custom.regions.code.${opt:stage}}
  timeout: 60
  memorySize: 512
  versionFunctions: false
  logRetentionInDays: 30
  architecture: arm64

  tracing:
    lambda: true

  deploymentBucket:
    name: ${self:custom.deploymentBucket.${opt:stage}}
    serverSideEncryption: AES256

  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: 'INFO,DEBUG,ERROR'
    DYNAMODB_TABLE: Appointment-${self:provider.stage}
    SNS_TOPIC_ARN: !Ref MySNSTopic
    MYSQL_LOCAL: ''

custom:
  accounts: ${file(./config/serverless/envs.yaml):accounts}
  accountId: ${self:custom.accounts.id.${opt:stage}}
  role: ${file(./config/serverless/envs.yaml):role}
  vpc: ${file(./config/serverless/envs.yaml):vpc}
  deploymentBucket: ${file(./config/serverless/envs.yaml):deploymentBucket}
  repoAbrev: ${file(./config/serverless/envs.yaml):repoAbrev}
  serviceName: ${self:custom.regions.abrev.${opt:stage}}${self:custom.accounts.abrev.${opt:stage}}${opt:stage}${self:custom.repoAbrev}
  ssmName: DICOAPICITAMED
  ssmRootPath: ${self:custom.ssmName}/${self:provider.stage}
  environmentsTags: ${file(./config/serverless/envs.yaml):environmentsTags}
  regions: ${file(./config/serverless/envs.yaml):regions}
  xapiKey: ${file(./config/serverless/envs.yaml):xapiKey}

plugins:
  - serverless-offline
  - serverless-plugin-typescript

package:
  individually: true
  patterns:
    - '!*/**'
    - '!*'
    - 'node_modules/**'
    - '!node_modules/serverless/**'
    - '!node_modules/@aws-sdk/**'
    - 'src/common/**'
    - 'package.json'

functions:
  appointment:
    handler: src/appointment/infrastructure/bootstrap/App.handler
    events:
      - http:
          path: /V1/appointment/{insuredId}
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
          request:
            parameters:
              querystrings:
                insuredId: true
          response:
            ${file(config/serverless/response.yaml)}
      - http:
          path: /V1/appointment
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
          response:
            ${file(config/serverless/response.yaml)}
      - sqs:
          arn: !GetAtt SQSReturnQueue.Arn
          batchSize: 1
  
  AppointmentPE:
    handler: src/peru/infrastructure/bootstrap/App.handler
    events:
      - sqs:
          arn: !GetAtt SQSPEQueue.Arn
          batchSize: 1
          filterPatterns:
            - countryISO: PE

  # AppointmentCL:
  #   handler: src/chile/infrastructure/bootstrap/App.handler
  #   events:
  #     - sqs:
  #         arn: !GetAtt SQSCLQueue.Arn
  #         batchSize: 1
  #         maximumBatchingWindow: 60
  #         filterPatterns:
  #           - countryISO: CL
  #         maximumRetryAttempts: 0

resources:
  - ${file(./config/serverless/dynamodb.yaml)}
  - ${file(./config/serverless/role.yaml)}
  - ${file(./config/serverless/useplan.yaml)}
  - ${file(./config/serverless/sns.yaml)}
  - ${file(./config/serverless/sqs.yaml)}